	객체지향프로그래밍의 목적 : 유연성 확보
	 	-> PC가 사용되는 영역이 매우 넓어졌고, 현실이 빨리 변화하기 때문에
		   그 변화에 대응할 수 있는 유연한 프로그래밍 방법론이 필요해짐

	유연한 프로그램이란 무엇인가 :
		현실의 변화가 발생했을 때 쉽게 대응할 수 있도록 작성된 프로그램
		-> 수정하기 쉬운 프로그램
		-> 낮은 결합도와 높은 응집도를 가진 프로그램

		모듈화 : 소프트웨어를 기능별로 분할하는 것
		결합도 : 기능들이 상호의존하는 정도
		응집도 : 모듈 내부 처리 요소들 간의 기능적 연관성
			(Class : 속성 + 기능, Package : 연관된 Class들의 집합)

	낮은 결합도와 높은 응집도는 모든 개발자들의 영원한 숙제
	
	디자인패턴 : 낮은 결합도와 높은 응집도를 갖춘 코드를 작성하기 위한, 검증된 설계방법
	프레임워크 : 낮은 결합도와 높은 응집도를 갖춘 어플리케이션을 제작할 수 있도록
		     미리 어플리케이션의 전체적인 구조를 제공
		