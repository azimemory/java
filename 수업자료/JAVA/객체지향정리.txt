 객체지향프로그래밍 : 추상화를 통해서 유연성을 확보하는 방법론
 Class : 현실 세계의 대상을, 우리가 구현하고자 하는 기능에서 필요한 속성만 남기고
	 나머지는 추상화한 것

 캡슐화 : Class에 의도하지 않은 값이 속성에 전달 되는 것을 방지
	  (-10살, -200kg 등등...)
	  
	  클래스의 메서드를, 메세지를 전달받을 메서드와 구체적인 기능을 구현하는 메서드로 분리
	  구체적인 기능은 private으로 감추고 메세지를 전달받을 메서드는 public으로 드러낸다.
	  구체적인 것을 감추어(추상화) 유연성을 확보

 상속 : Class의 필드(필드변수, 메서드)와 Type을 다른 클래스에게 물려주는 것

 다형성 : 구체적인 타입을 감추는 것. 여러 타입의 instance들을 추상화된 하나의 타입으로 다루어
        유연한 프로그램 설계를 가능하게 해준다.