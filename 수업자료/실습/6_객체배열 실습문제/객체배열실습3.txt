[객체배열 실습]

- 클래스 추가 : 	
	com.kh.silsub3.member.model.vo.Member.java
	com.kh.silsub3.member.controller.MemberManager.java
	com.kh.silsub3.member.view.MemberMenu.java
	com.kh.silsub3.member.main.Main.java (main() 포함)

1. Member 클래스 작성
	: 회원 정보 클래스
 - Field 구성
	- id:String	//아이디
	- name:String	//이름
	- password:String	//패스워드
	- email:String	//이메일주소
	- gender:char	//성별
	- age:int		//나이

 - 디폴트 생성자와 매개변수있는 생성자 2개 작성함
 - 각 필드에 대한 setter, getter 메소드 작성함
 - 메소드 추가 : 필드값 확인용 메소드 (문자열 합치기한 결과 리턴함)
	public String memberInfo()


2. MemberMenu 클래스
	: 메뉴 화면 제공용 클래스
 - Field
	- sc:Scanner	//키보드 입력용 객체 생성 초기화함
	- mManager:MemberManager   //회원관리 클래스 객체 생성 초기화함

 - 디폴트 생성자 작성

 - 메소드 작성
	public void mainMenu(){}
	public void searchMenu(){}
	public void sortMenu(){}
	public void modifyMenu(){}
 - 실행
	Main 클래스의 main() 메소드에서
	{
		MemberMenu mMenu = new MemberMenu();
		mMenu.mainMenu();

		System.out.println("회원관리 프로그램을 종료합니다.");
	}

 - 메소드 구현
	public void mainMenu(){
	
	//메뉴는 반복 출력되게 함
	<실행 화면> ----------------------------------------------------------

	//MemberManager 클래스의 public static final SIZE(상수필드)값 출력시킴
	최대 등록 가능한 회원 수는 10 명입니다.
	//MemberManager 클래스의 memberCount 필드의 값을 리턴받아 출력
	현재 등록된 회원수는 5명 입니다.

	***** 회원 관리 프로그램 *****

	1. 새 회원 등록		객체배열사용
	2. 회원 조회		equals 사용
	3. 회원 정보 수정	setter사용
	4. 회원 정보 정렬	compareto 사용
	5. 회원 삭제		
	6. 모두 출력
	9. 끝내기
	메뉴 선택 : 

	- 입력된 번호에 따라 MemberManager 클래스의 메소드가 실행되게 함
	- 조회, 수정, 정렬 메뉴는 각각 부메뉴에 대한 메소드를 실행되게 함
	  1번 선택시 >> MemberManager 의 memberInput() 실행
	  2번 선택시 >> searchMenu();
	  3번 선택시 >> modifyMenu();
	  4번 선택시 >> sortMenu();
	  5번 선택시 >> MemberManager 의 deleteMember() 실행
	  6번 선택시 >> MemberManager 의 printAllMember() 실행
	- 끝내기는 "정말로 끝내시겠습니까? (y/n) : " 에서
		대/소문자 'y'가 입력되면 main() 으로 리턴시킴
	}


	public void searchMenu(){
	//메뉴는 반복 출력되게 함
	<실행 화면>

	***** 회원 정보 검색 메뉴 *****
	
	1. 아이디로 검색
	2. 이름으로 검색
	3. 이메일로 검색
	9. 이전 메뉴로 가기
	메뉴 선택 : 

	- 번호에 따라 MemberManager 클래스의 메소드 실행함
	  1번 선택시 >> 키보드로 아이디를 입력받아, 메소드로 아이디를 전달함
		검색한 회원의 정보가 존재하면, 그 회원의 배열인덱스를 리턴함
		존재하지 않으면 -1을 리턴함
	    int index = 레퍼런스.searchMemberId(입력된 아이디);	
	  2번 선택시 >> 키보드로 이름을 입력받아, 메소드로 아이디를 전달함
		검색한 회원의 정보가 존재하면, 그 회원의 배열인덱스를 리턴함
		존재하지 않으면 -1을 리턴함
	    int index = 레퍼런스.searchMemberName(입력된 이름);
	  3번 선택시 >> 키보드로 이메일을 입력받아, 메소드로 아이디를 전달함
		검색한 회원의 정보가 존재하면, 그 회원의 배열인덱스를 리턴함
		존재하지 않으면 -1을 리턴함
	    int index = 레퍼런스.searchMemberEmail(입력된 이메일주소);
	  9번 선택시 >> "메인 메뉴로 화면 이동합니다." 출력하고, 리턴함
	  
	 리턴받은 인덱스 위치가 -1보다 큰값이면 그 위치의 회원 정보를 출력함
		>> MemberManager 클래스의 printMember(index) 실행
         리턴받은 값이 -1이면, "회원정보가 존재하지 않습니다." 출력함
	}


	public void sortMenu(){
	//메뉴는 반복 출력되게 함
	<실행 화면>
	***** 회원 정보 정렬 출력 메뉴 *****
	
	1. 아이디 오름차순 정렬 출력
	2. 아이디 내림차순 정렬 출력
	3. 나이 오름차순 정렬 출력
	4. 나이 내림차순 정렬 출력
	5. 성별 내림차순 정렬 출력(남여순)
	9. 이전 메뉴로 가기
	메뉴 선택 : 

	- 1번 선택시 >> MemberManager 클래스의 sortIDAsc() 실행
	- 2번 선택시 >> MemberManager 클래스의 sortIDDes() 실행
	- 3번 선택시 >> MemberManager 클래스의 sortAgeAsc() 실행
	- 4번 선택시 >> MemberManager 클래스의 sortAgeDes() 실행
	- 5번 선택시 >> MemberManager 클래스의 sortGenderDes() 실행
	- 9번 선택시 >> "메인 메뉴로 화면 이동합니다." 출력하고, 리턴함
	}

	public void modifyMenu(){
	//메뉴는 반복 출력되게 함
	<실행 화면>
	***** 회원 정보 수정 메뉴 *****

	1. 암호 변경
	2. 이메일 변경
	3. 나이 변경
	9. 이전 메뉴로 가기
	메뉴 선택 : 

	- 1번 선택시 >> 변경할 회원의 아이디 : 입력받음
		     MemberManager 클래스의 검색메소드 실행함 >>
		     int index = 레퍼런스.searchMemberId(아이디);
		     리턴받은 인덱스로 회원의 정보를 출력함
		     변경할 암호 : 입력받음
		     Member 클래스의 setPassword(암호) 실행
		     "회원의 정보가 변경되었습니다." 출력
		     단, 검색메소드의 리턴값이 -1아닌 경우에만 실행되게 함
	- 2번 선택시 >> 변경할 회원의 아이디 : 입력받음
		     MemberManager 클래스의 검색메소드 실행함 >>
		     int index = 레퍼런스.searchMemberId(아이디);
		     리턴받은 인덱스로 회원의 정보를 출력함
		     변경할 이메일주소 : 입력받음
		     Member 클래스의 setEmail(이메일) 실행
		     "회원의 정보가 변경되었습니다." 출력
		     단, 검색메소드의 리턴값이 -1아닌 경우에만 실행되게 함
	- 3번 선택시 >> 변경할 회원의 아이디 : 입력받음
		     MemberManager 클래스의 검색메소드 실행함 >>
		     int index = 레퍼런스.searchMemberId(아이디);
		     리턴받은 인덱스로 회원의 정보를 출력함
		     변경할 나이 : 입력받음
		     Member 클래스의 setAge(나이) 실행
		     "회원의 정보가 변경되었습니다." 출력
		     단, 검색메소드의 리턴값이 -1아닌 경우에만 실행되게 함
	- 9번 선택시 >> "메인 메뉴로 화면 이동합니다." 출력하고, 리턴함

	}